#!/bin/sh


# La línea "set -o errexit" se utiliza para establecer la opción de shell "errexit",
#  lo que significa que el script se detendrá inmediatamente si alguna de las instrucciones
#  del script falla o retorna un valor distinto de cero.

# La línea "set -o pipefail" establece la opción de shell "pipefail", lo que
# significa que si una de las instrucciones del script falla, la ejecución se
#  detendrá inmediatamente y se devolverá el valor de salida del comando que falló.

# La línea "set -o nounset" establece la opción de shell "nounset", lo que significa
# que si el script intenta utilizar una variable que no ha sido
#  inicializada o definida, se detendrá inmediatamente.

set -o errexit
set -o pipefail
set -o nounset


# N.B. If only .env files supported variable expansion...
export CELERY_BROKER_URL="${REDIS_URL}"

if [ -z "${POSTGRES_USER}" ]; then
    base_postgres_image_default_user='postgres'
    export POSTGRES_USER="${base_postgres_image_default_user}"
fi
export DATABASE_URL="postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}"

postgres_ready() {
python << END
import sys

import psycopg2

try:
    psycopg2.connect(
        dbname="${POSTGRES_DB}",
        user="${POSTGRES_USER}",
        password="${POSTGRES_PASSWORD}",
        host="${POSTGRES_HOST}",
        port="${POSTGRES_PORT}",
    )
except psycopg2.OperationalError:
    sys.exit(-1)
sys.exit(0)

END
}
until postgres_ready; do
  >&2 echo 'Waiting for PostgreSQL to become available...'
  echo ${POSTGRES_DB}
  sleep 1
done
>&2 echo 'PostgreSQL is available'

exec "$@"
